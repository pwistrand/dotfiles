# Grep shortcuts

# case insensitive text search
function s() {
if [ $# -lt 1 ]; then
        echo "Usage: s arg [arg2 ...] grep -i for 'arg arg2 ...'"
else
        grep -n -i -r --color=auto --exclude-dir=.git -F -e "$*" . 2>/dev/null
fi
}

# case sensitive text search
function s_() {
if [ $# -lt 1 ]; then
        echo "Usage: s_ arg [arg2 ...] grep case sensitive for 'arg arg2 ...'"
else
        grep -n -r --exclude-dir=.git -F -e "$*" . 2>/dev/null
fi
}

# Find shortcuts

# Case insensitive file search
function f() {
if [ $# -ne 1 ]; then
        echo 'Usage: f name --> find -iname '*'name'*' 2>/dev/null'
else
        find . -iname '*'"$1"'*' 2>/dev/null
fi
}

# Case sensitive file search
function f_() {
if [ $# -ne 1 ]; then
        echo 'Usage: f_ name --> find -name name 2>/dev/null'
else
        find . -name "$1" 2>/dev/null
fi
}

# Process search
function p() {
if [ $# -ne 1 ]; then
	echo 'Usage p name --> ps -Af | grep name'
else
	ps -Af | grep "$1"
fi
}

# History search
function h() {
if [ $# -ne 1 ]; then
	history
else
	history | grep "$1"
fi
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	)

	local cmd=""
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar using \`${cmd}\`…"
	"${cmd}" -v "${tmpFile}" || return 1
	[ -f "${tmpFile}" ] && rm "${tmpFile}"
	echo "${tmpFile}.gz created successfully."
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Start an HTTP server from a directory, optionally specifying the port
function w3() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .
	else
		subl "$@"
	fi
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .
	else
		vim "$@"
	fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}